(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{"5vW8":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return l}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk");var a=n("SAVP"),r=n("TjRS");n("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/best_practices/python.mdx"}});var p={_frontmatter:o},s=r.a;function l(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(a.b)(s,i({},p,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"python-conventions"},"Python conventions"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Use ",Object(a.b)("a",i({parentName:"p"},{href:"https://www.python.org/dev/peps/pep-0008/"}),"pep8"),"\nWith the exceptions\nthat the closing brace/bracket/parenthesis on multi-line constructs must be lined\nup under the first character of the line that starts the multi-line construct,\nand the absolute maximum line length is 119 characters\nif it increases readability.\nThe recommended line length for most cases is still 79.\n",Object(a.b)("a",i({parentName:"p"},{href:"https://www.python.org/dev/peps/pep-0008/#maximum-line-length"}),"https://www.python.org/dev/peps/pep-0008/#maximum-line-length"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Write ",Object(a.b)("a",i({parentName:"p"},{href:"https://speakerdeck.com/pyconslides/transforming-code-into-beautiful-idiomatic-python-by-raymond-hettinger-1"}),"Pythonic code"),",\nnot ",Object(a.b)("a",i({parentName:"p"},{href:"https://www.youtube.com/watch?v=wf-BqAjZb8M"}),"Java (< 5) with pep8")),Object(a.b)("p",{parentName:"li"},"Not"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",i({parentName:"pre"},{className:"language-python"}),"colors = ['red', 'green', 'blue']\nfor i in range(len(colors)):\n    print(colors[i])\n")),Object(a.b)("p",{parentName:"li"},"but"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",i({parentName:"pre"},{className:"language-python"}),"for color in colors:\n  print(color)\n")),Object(a.b)("p",{parentName:"li"},"(CC-BY-SA Raymond Hettinger)")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Use a code style checker like ",Object(a.b)("a",i({parentName:"p"},{href:"https://pypi.python.org/pypi/flake8"}),"flake8"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Make ",Object(a.b)("a",i({parentName:"p"},{href:"https://docs.pytest.org/en/latest/"}),"pytest")," tests,\nand run tests against latest released Python 3.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Use ",Object(a.b)("a",i({parentName:"p"},{href:"https://github.com/pyenv/pyenv"}),"pyenv")," to install up to date (or older!) Python versions not available in your distribution repos")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Use ",Object(a.b)("inlineCode",{parentName:"p"},"pyenv virtualenv")," (or ",Object(a.b)("inlineCode",{parentName:"p"},"python -m venv")," if not using pyenv) for creating virtualenvs, not ",Object(a.b)("inlineCode",{parentName:"p"},"virtualenv")," or other alternatives when using virtual environments in scripts.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Do not use print unless you really specifically want to print to stdout\n(for example with a cli tool).\nWrite status, error, debug etc. messages using the logging module.\nThis allows a main program using the code from elsewhere to configure\nthe logging target (to stderr, file, syslog, or logging server).\nDo not use the warnings module.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Use Travis for automatic testing")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Prepare the project for distribution in the same way as the\n",Object(a.b)("a",i({parentName:"p"},{href:"https://github.com/pypa/sampleproject"}),"pypa sampleproject"),":\nWrite a setup.py, setup.cfg, README.rst,\nLICENSE (in most cases the MIT license)\nand .travis.yml files,\ncreate a directory for tests (named ",Object(a.b)("inlineCode",{parentName:"p"},"tests"),"),\n",Object(a.b)("em",{parentName:"p"},"but")," make a top level directories for the actual package code\nnamed ",Object(a.b)("inlineCode",{parentName:"p"},"src"),", ",Object(a.b)("em",{parentName:"p"},"not")," ",Object(a.b)("a",i({parentName:"p"},{href:"https://blog.ionelmc.ro/2014/05/25/python-packaging/#the-structure"}),"the same as the package"),".\nIn case the project is not a reusable part of a bigger application,\nbut a standalone app requiring a more complex installation\n(like a Django project requiring a database setup etc.),\nyou can skip the setup.py setup.cfg.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Use semantic versions")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Use static typing for APIs instead of comments.\nThat way IDEs can give better info, and we can do some static checking (so the type info will not get stale, unlike comments)."),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Not like this:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",i({parentName:"pre"},{className:"language-python"}),'def func_with_docstring(foo, bar):\n    """Return the baz of foo and bar\n\n    Args:\n        foo: int\n        bar: float\n    Returns:\n        float\n    """\n    return bar/foo\n')),Object(a.b)("p",{parentName:"li"},"But like this:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",i({parentName:"pre"},{className:"language-python"}),'def func_with_typing(foo: int, bar: float) -> float:\n    """Return the baz of foo and bar"""\n    return bar/foo\n'))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Use mypy for checking")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Use your editor tooling (for example PyCharm can benefit from types)")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Check\nPEP 3107 (function annotations),\nPEP 484 (defined format for annotations + comment annotations) and\nPEP 526 (syntax for variable annotations)")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",i({parentName:"p"},{href:"https://github.com/zulip/zulip"}),"https://github.com/zulip/zulip")," is and example of\ntype annotated Django project.")))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Use a doctest to illustrate use and also run the doctests\n(again, so that they won't get stale).")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Use ",Object(a.b)("a",i({parentName:"p"},{href:"https://docs.python.org/3/library/secrets.html"}),"https://docs.python.org/3/library/secrets.html")," for cryptographic needs, not the ",Object(a.b)("inlineCode",{parentName:"p"},"random")," module")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Use whitelists for reading ",Object(a.b)("inlineCode",{parentName:"p"},"POST")," data to avoid mass assignment problems ",Object(a.b)("a",i({parentName:"p"},{href:"https://coffeeonthekeyboard.com/mass-assignment-security-part-10-855/"}),"https://coffeeonthekeyboard.com/mass-assignment-security-part-10-855/"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Do not use truthiness to check for existence, since values like None, False, 0, and '' will fail the check."),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Use ",Object(a.b)("inlineCode",{parentName:"li"},"is not None")," or ",Object(a.b)("inlineCode",{parentName:"li"},"not in iterable_instance")," and so on, as appropriate"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Do not use assert for normal runtime checks (for example to validate incoming data)\nas they will be disabled with debug off (in cpython). Use plain ifs and then raise assertions explicitly"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Testing uses the assert as syntax sugar, which is fine. You don't run tests in production."))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Do not use tuples as placeholder for lists you think will not change.\nTuples are semantically limited in length, lists inherently might be of different length even if\nin one particular case they aren't."),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Compare the concepts of coordinates (always ",Object(a.b)("inlineCode",{parentName:"li"},"(x, y)"),", ",Object(a.b)("inlineCode",{parentName:"li"},"(x, y, z)")," etc.) to a list of Django plugins.\nCoordinates never have different length, that would simply be a different data type,\nbut different Django projects have different length of plugin lists even if ",Object(a.b)("em",{parentName:"li"},"your")," app's doesn't change.")))),Object(a.b)("h4",{id:"hints"},"Hints"),Object(a.b)("p",null,"Try ipython for exploration, ipdb for debugging and vmprof for profiling."))}l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/best_practices/python.mdx"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-best-practices-python-mdx-e742490b5f830cf8f364.js.map